name: Check build

on:
  push:
    branches:
      - main
  release:
    types: [published]
  pull_request:
    branches:
      - "**"

concurrency:
  group: ${{ github.event_name == 'pull_request' && format('{0}-{1}', github.workflow_ref, github.event.pull_request.number) || github.run_id }}
  cancel-in-progress: true

permissions:
  id-token: write
  contents: read

jobs:
  check-ruff-formatting:
    name: Check python formatting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: Chik-Network/actions/setup-python@main

      - name: Install Dependencies
        run: |
          pip install ruff

      - name: Check generated
        run: |
          ruff format --check --diff .
          git diff --exit-code

  check-puzzles:
    name: Check generated puzzles
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: Chik-Network/actions/setup-python@main

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry

      - name: poetry install
        run: |
          poetry install

      - name: Check generated
        run: |
          poetry run python ./generate_chiklisp_constants.py
          git diff --exit-code

  fmt:
    runs-on: ubuntu-latest
    name: cargo fmt
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Install rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: fmt
        run: |
          cargo fmt --all -- --files-with-diff --check

  clippy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: workspace
        run: |
          cargo clippy --workspace --all-features --all-targets

  build-publish:
    name: Build & Publish
    runs-on: ubuntu-latest
    needs:
      - check-puzzles
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set Env
        uses: Chik-Network/actions/setjobenv@main

      - uses: Chik-Network/actions/setup-python@main
        with:
          python-version: ${{ matrix.python.major-dot-minor }}

      - name: Update pip
        run: |
          python -m pip install --upgrade pip

      - name: Set up rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies
        run: |
          python -m pip install poetry
          poetry install

      - name: Build Wheel/Source Dist
        run: |
          python -m build --outdir dist .
          pip wheel --no-deps -w dist .

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheel-sdist
          path: ./dist

      - name: cargo build
        run: |
          cargo build --release

      - name: Publish (dry run)
        run: cargo publish --dry-run

      - name: Upload crate artifacts
        uses: actions/upload-artifact@v4
        with:
          name: crate
          path: ./target/package/*-*.crate

      - name: Publish (crates.io)
        if: env.FULL_RELEASE == 'true'
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.cargo_registry_token }}
        run: cargo publish

      - name: Publish distribution to PyPI
        if: env.FULL_RELEASE == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          skip-existing: true
